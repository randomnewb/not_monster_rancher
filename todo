# HIGH PRIORITY

- Add spawner class (define the entity class it spawns) - it can be inherited by other classes later

  - [ ] Perhaps easiest thing to do is to rework the spawner as a tile rather than a sprite
  - [x] Has a physics body so that it can be collided with
  - [ ] Add meta data so that it can be interacted with/destroyed
  - [x] Runs on a counter/timer
  - [x] Check if there are too many enemies in a zone (Max 100 entities in enemy/entity array)
  - [x] Implement spawner in world generation
  - [x] Takes in a monster class

- Player Character Sheet (UI/menu)

  - [ ] Show player's stats (str, dex, wis)
  - [ ] Shows different life skills progress (mining, woodcutting, etc.)
  - [ ] Shows level, exp, and other stats like health, speed, attack damage

- Player inventory

  - [ ] Simple array to hold items to start
  - [ ] Grid GUI later with item icons, amount, and item description
  - [ ] Hotbar for tools or keep context-based?

- Player equipment

  - [ ] System for equipping tools, weapons, armor, etc.

- [ ] Collectibles other than jewels such as monster drops, weapons, armors, forageables
- [ ] Change Monster drops to items other than jewels
- Diablo-style display at bottom
  - [x] Currently targeted enemy name
  - [ ] Enemy's health

# BUGS

- [x] Monsters spawned by spawners can be pushed
- [ ] Jewels can be created on top of spawner tiles
- [ ] Monster spawners should be able to be destroyed by mining skill
- [ ] Player should not be able to use life skill and attack at the same time
- [ ] Jewels can spawn into rocks (this might have been fixed)
- [ ] When player 'takes' positive damage, make damage text green or a different color
- [ ] Seems that monsters can spawn in the outer boundaries of map which causes them to get stuck
- [ ] Implement behavior to have monsters move away from an obstruction if they are blocked for a long time
- [ ] If the player uses keyboard input too quickly after starting a new game and before the map has time to finish generating, the game crashes

  - Probably need to implement some sort of loading screen and then allow the player to move and click the screen
  - Or disable any input until the map is finished generating

# REFACTORING

- [ ] Look for places to componentize code
- [ ] Refactor movement and interaction code, lots of duplication between clicking and keyboard
- [ ] Create a util method that instantiates a random blank walking tile with meta data
- [ ] terrainScene and uiScene should probably be more like utils or classes
- [ ] remove the data.playerhealth and try to implement Player Health directly from the Player class
- Need to refactor a bunch of things as constants

  - [ ] Directions (up, down, left, right)

  - This might already be done, need to double-check
  - In the UIscene's update(), let's detect if the player exists and update the healthbar directly from the playerclass's health

- Rework AI behavior
- [ ] Attack alert animation could be unique and defined in each entity
- [ ] Movement could be defined in each entity and read in the 'wander' state

# NEXT PRIORITY

- Building mode

  - [ ] Just allow the player to make walls
  - [ ] Ghost image of the wall that will be placed

- [ ] Enemy capturing/taming system
- [ ] Elite Monsters ('larger' or scaled up monsters)

- [ ] Attach weapon to the player/add a swing animation with the weapon on attack
- [ ] Add interaction with projectile sprite and obstructions (projectile is blocked/destroyed)
- [ ] Rework graphic for current interacted entity/object

- Crafting system

  - [ ] Allow the player to craft one item to test
  - [ ] Terraria-based system where the player can craft items from a list of items and a list of materials

- [ ] Implement NPCs that are not monsters that the player can interact with
- [ ] Equipment system

  - Randomized stats as a stretch goal

- [ ] Digging skill
- [ ] Foraging/gathering skill
- [ ] Procedurally generated structures like small houses/walls (complete or dilapidated)
- [ ] Rework NPCs so that level is created first, and then other stats are based on level
- [ ] Rework tile system, just implement grid-based movement from one of the Phaser grid tutorials
  - Use Tiled for creating tilemaps with meta data (e.g. if a tile is collidable, interactable, drops certain items, etc.)
- [ ] Level Up animation (like Ragnarok Online with the fading angel wings)
- [ ] Experience Point System

  - Players can only ever get a max of 10 exp from any enemy or event and a minimum of 1 exp
  - Players get exp towards a general level and also towards specific life skills
  - EXP is based on the player's life skills level and the enemy's/encounter level

- Need to create a skill tree menu for different life skills

  - combat, taming, mining, woodcutting, etc. and these can be broken down further
    - combat -> melee, ranged, magic, etc. and types of melee like sword vs axe vs spear

- Implement player stats (strength, wisdom, dexterity, luck)

  - [ ] Strength affects melee damage, health, possibly carry capacity
  - [ ] Wisdom affects magic damage, magic defenses/resistances, mana
  - [ ] Dexterity affects ranged damage, ranged defense, attack speed, movement speed
  - [ ] Luck affects drop rates

- [ ] Implement Player FSM
- [ ] Continue to implement ECS: https://en.wikipedia.org/wiki/Entity_component_system

- Rework Player death/Game Over

  - [ ] on player death, hide player active/visibility, but then allow user to just revive, teleport back to a set point (right now it is initial spawn, later on, maybe a saved point)

- In-game options/Pause Menu when player hits ESC or presses gear icon on mobile with these options:

  - [ ] Resume Game
  - [ ] Options
  - [ ] Save and Return to Main Menu

- [ ] Save/Load System

# OTHER

- [/] Refactor update() methods (build plugins or code to listen for update event) and listen for update event to run that specific code when event is fired, chunk code

- [ ] create phaser plugins where possible for things like (e.g. playing sound effects, loading an area from a tilemap, controls available to my scene)

- [ ] monsters have spawning requirements (random example, frogs can mate and lay eggs in water tiles)
- [ ] During generation, generate a barrier of walls or trees along the edges of the map

- [ ] potential issue with A\*: if original map is edited, need to make sure we update the map in data.js,
      such as if building is implemented or if obstructions are removed, the original array would need to be updated

- Implementing certain actions based on what a mobile user is clicking on

  - [ ] If the player clicks on a tree, the player will move towards the tree and chop it down
  - [ ] If the player clicks on a rock, the player will move towards the rock and mine it
  - [ ] If the player clicks on a monster, the player will move towards the monster and attack it
  - [ ] If the player clicks on a jewel, the player will move towards the jewel and pick it up

- [/] Invincibility added to frog

  - Actually setup frog being invincible during invincibility frames (100 milliseconds)

- [ ] Option to flip touch controls (left/right)

- [/] Health bar implementation

  - Jittery because its position is set to the player's position, need to implement move w/ camera

- [/] Implement one button for mobile

  - [x] Make sure it follows with the camera
  - [ ] (3 different actions [action1, action2, action3], and an inventory action)

- [ ] Pixel Art: Log/sticks
- [ ] Pixel Art: Pebbles/small stones
- [ ] Pixel Art: General item/bag

- [ ] Rewrite mapping function to map based on length of map rather than hard-coded size

- [ ] (OPTIONAL) Jewels drop out of player on hit
- [ ] Character customization/select screen
- [ ] Water tiles/swimming

- Inventory system via an array or grid inventory (stretch) system

  - [ ] Inventory UI
  - [ ] Inventory slots
  - [ ] Inventory items
  - [ ] Inventory item stats
  - [ ] Inventory item descriptions
  - [ ] Inventory item tooltips
  - [ ] Inventory item drag and drop
  - [ ] Inventory item equip
  - [ ] Inventory item unequip
  - [ ] Inventory item drop
  - [ ] Inventory item use
  - [ ] Inventory item stack
  - [ ] Inventory item split
  - [ ] Inventory item merge
  - [ ] Inventory item sort
  - [ ] Inventory item search
  - [ ] Inventory item filter
  - [ ] Inventory item highlight

- Game world/map also made of a 2d array
  - [ ] Broken into zones made of 32x32 tiles
  - [ ] Zones have properties like biomes/types, levels, etc. which also contain certain entities
